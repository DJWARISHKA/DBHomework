/*
Deployment script for DBHomework

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DBHomework"
:setvar DefaultFilePrefix "DBHomework"
:setvar DefaultDataPath "C:\Users\НакуренныйВолшебник\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\НакуренныйВолшебник\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Creating [dbo].[Prods]...';


GO
CREATE TYPE [dbo].[Prods] AS TABLE (
    [Name]        VARCHAR (50) NULL,
    [Short_name]  VARCHAR (20) NULL,
    [Vendor_code] INT          NULL,
    [Barcode]     VARCHAR (30) NULL,
    [Price]       MONEY        NOT NULL);


GO
PRINT N'Creating [dbo].[Inventory]...';


GO
CREATE TABLE [dbo].[Inventory] (
    [Storage_id] INT NOT NULL,
    [Product_id] INT NOT NULL,
    [Count]      INT NOT NULL,
    [Reserve]    INT NOT NULL
);


GO
PRINT N'Creating [dbo].[Products]...';


GO
CREATE TABLE [dbo].[Products] (
    [id]          INT          NOT NULL,
    [Name]        VARCHAR (50) NULL,
    [Short_name]  VARCHAR (20) NULL,
    [Vendor_code] INT          NULL,
    [Barcode]     VARCHAR (30) NULL,
    [Price]       MONEY        NOT NULL,
    [Provider_id] INT          NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC),
    UNIQUE NONCLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[Providers]...';


GO
CREATE TABLE [dbo].[Providers] (
    [id]        INT           NOT NULL,
    [Name]      VARCHAR (100) NOT NULL,
    [Telephone] VARCHAR (15)  NULL,
    [Email]     VARCHAR (30)  NULL,
    [Adress]    VARCHAR (100) NULL,
    [Director]  VARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([id] ASC),
    UNIQUE NONCLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[Storages]...';


GO
CREATE TABLE [dbo].[Storages] (
    [id]          INT           NOT NULL,
    [Name]        VARCHAR (50)  NOT NULL,
    [Adress]      VARCHAR (100) NOT NULL,
    [Responsible] VARCHAR (30)  NULL,
    [Telephone]   VARCHAR (15)  NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC),
    UNIQUE NONCLUSTERED ([id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Inventory]...';


GO
ALTER TABLE [dbo].[Inventory]
    ADD DEFAULT 0 FOR [Count];


GO
PRINT N'Creating unnamed constraint on [dbo].[Inventory]...';


GO
ALTER TABLE [dbo].[Inventory]
    ADD DEFAULT 0 FOR [Reserve];


GO
PRINT N'Creating unnamed constraint on [dbo].[Inventory]...';


GO
ALTER TABLE [dbo].[Inventory]
    ADD FOREIGN KEY ([Storage_id]) REFERENCES [dbo].[Storages] ([id]) ON DELETE CASCADE;


GO
PRINT N'Creating unnamed constraint on [dbo].[Inventory]...';


GO
ALTER TABLE [dbo].[Inventory]
    ADD FOREIGN KEY ([Product_id]) REFERENCES [dbo].[Products] ([id]) ON DELETE CASCADE;


GO
PRINT N'Creating unnamed constraint on [dbo].[Products]...';


GO
ALTER TABLE [dbo].[Products]
    ADD FOREIGN KEY ([Provider_id]) REFERENCES [dbo].[Providers] ([id]);


GO
PRINT N'Creating [dbo].[Names]...';


GO
CREATE VIEW [dbo].[Names]
	AS 
		SELECT  [Prod].[Name] AS [Product],
				[Prov].[Name] AS [Provider],
				[Stor].[Name] AS [Storage]
		FROM [dbo].[Products] AS [Prod]
		JOIN [dbo].[Providers] AS [Prov] ON [Prod].[Provider_id] = [Prov].[id]
		JOIN [dbo].[Inventory] AS [Inv] ON [Inv].[Product_id] = [Prod].[id]
		JOIN [dbo].[Storages] AS [Stor] ON [Inv].[Storage_id] = [Stor].[id]
GO
PRINT N'Creating [dbo].[ProductCount]...';


GO
CREATE FUNCTION [dbo].[ProductCount]()
RETURNS @Result TABLE ([Count] INT, [Provider_id] INT)
AS
BEGIN

INSERT INTO @Result
SELECT SUM([Inv].[Count]), [Prod].[Provider_id]
FROM [dbo].[Products] AS [Prod]
		JOIN [dbo].[Inventory] AS [Inv] ON [Inv].[Product_id] = [Prod].[id]
GROUP BY  [Prod].[Provider_id]

RETURN
END;
GO
PRINT N'Creating [dbo].[AddInventory]...';


GO
CREATE PROCEDURE [dbo].[AddInventory]
	@storage_id int,
	@product_id int,
	@count int,
	@reserve int = 0
AS
BEGIN

IF ((SELECT COUNT(1) FROM [dbo].[Inventory] 
	WHERE [dbo].[Inventory].[Storage_id] = @storage_id 
		AND [dbo].[Inventory].[Product_id] = @product_id) = 0)

		INSERT INTO [dbo].[Inventory] 
		VALUES (@storage_id, @product_id, @count, @reserve)

	ELSE

		UPDATE [dbo].[Inventory] 
		SET [dbo].[Inventory].[Count] = [dbo].[Inventory].[Count] + @count,
			[dbo].[Inventory].[Reserve] = [dbo].[Inventory].[Reserve] + @reserve
		WHERE ([dbo].[Inventory].Storage_id = @storage_id 
			AND [dbo].[Inventory].[Product_id] = @product_id)

END;
RETURN 0
GO
PRINT N'Creating [dbo].[AddProvider]...';


GO

CREATE PROCEDURE [dbo].[AddProvider]
	@Name VARCHAR (100),
	@Telephone VARCHAR (15),
	@Email VARCHAR (30),
	@Adress VARCHAR (100),
	@Director VARCHAR (30),
	@Products Prods READONLY
AS
BEGIN
	INSERT INTO [dbo].[Providers] 
		VALUES (NEWID(), @Name, @Telephone, @Email, @Adress, @Director)

	DECLARE @provider_id INT;

	SELECT @provider_id = LAST([dbo].[Providers].[id])
	FROM [dbo].[Providers]

	INSERT INTO [dbo].[Products]
		SELECT NEWID(), *, @provider_id FROM @Products
END;
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteProduct]...';


GO
CREATE PROCEDURE [dbo].[DeleteProduct]
	@product_id int
AS
BEGIN
	DELETE [dbo].[Products]
	WHERE @product_id = [dbo].[Products].[id]
	--Inventory has cascade deeting
END;
RETURN 0
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0c7febe7-c137-41a6-8675-9563815f534b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0c7febe7-c137-41a6-8675-9563815f534b')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DECLARE @Product1 Prods
DECLARE @Product2 Prods
BEGIN
IF ((SELECT COUNT(1) FROM [dbo].[Storages]) = 0)
BEGIN
INSERT INTO [dbo].[Storages]
	VALUES (1, "Sklad 1", "Днепр", "Nick", "0990101");

INSERT INTO [dbo].[Storages]
	VALUES (2, "Sklad 2", "Киев", "Vlad", "0990102");
END;
	
IF ((SELECT COUNT(1) FROM [dbo].[Providers]) = 0)
BEGIN
INSERT INTO @Product1
	VALUES ("Chocolate", "Choco", 1234, "2990832", 11.99)

EXEC [dbo].[AddProvider] @Name = "AVK", @Telephone = "0502345", @Email = "WEDF@DF.UA",
	@Adress = "Днепр", @Director = "Тасельхоф", @Products = @Product1

INSERT INTO @Product2
	VALUES ("Apple", "Choco", 3429, "2990234", 16.32)

EXEC [dbo].[AddProvider] @Name = "Ферма", @Telephone = "0502345", @Email = "dfed@yhb.UA",
	@Adress = "Днепр", @Director = "Бонифатциевна", @Products = @Product2

EXEC [dbo].[AddInventory] 1, 1, 2
END;

END;
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
