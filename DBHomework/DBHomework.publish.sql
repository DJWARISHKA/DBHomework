/*
Deployment script for DBHomework

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DBHomework"
:setvar DefaultFilePrefix "DBHomework"
:setvar DefaultDataPath "C:\Users\НакуренныйВолшебник\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\НакуренныйВолшебник\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Creating [dbo].[Inventory]...';


GO
CREATE TABLE [dbo].[Inventory] (
    [Storage_id] INT NOT NULL,
    [Product_id] INT NOT NULL,
    [Count]      INT NOT NULL,
    [Reserve]    INT NOT NULL
);


GO
PRINT N'Creating [dbo].[Products]...';


GO
CREATE TABLE [dbo].[Products] (
    [id]          INT          IDENTITY (1, 1) NOT NULL,
    [Name]        VARCHAR (50) NULL,
    [Short_name]  VARCHAR (20) NULL,
    [Vendor_code] INT          NULL,
    [Barcode]     VARCHAR (30) NULL,
    [Price]       MONEY        NOT NULL,
    [Provider_id] INT          NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC),
    UNIQUE NONCLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[Providers]...';


GO
CREATE TABLE [dbo].[Providers] (
    [id]        INT           IDENTITY (1, 1) NOT NULL,
    [Name]      VARCHAR (100) NOT NULL,
    [Telephone] VARCHAR (15)  NULL,
    [Email]     VARCHAR (30)  NULL,
    [Adress]    VARCHAR (100) NULL,
    [Director]  VARCHAR (30)  NULL,
    PRIMARY KEY CLUSTERED ([id] ASC),
    UNIQUE NONCLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[Storages]...';


GO
CREATE TABLE [dbo].[Storages] (
    [id]          INT           IDENTITY (1, 1) NOT NULL,
    [Name]        VARCHAR (50)  NOT NULL,
    [Adress]      VARCHAR (100) NOT NULL,
    [Responsible] VARCHAR (30)  NULL,
    [Telephone]   VARCHAR (15)  NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC),
    UNIQUE NONCLUSTERED ([id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Inventory]...';


GO
ALTER TABLE [dbo].[Inventory]
    ADD DEFAULT 0 FOR [Count];


GO
PRINT N'Creating unnamed constraint on [dbo].[Inventory]...';


GO
ALTER TABLE [dbo].[Inventory]
    ADD DEFAULT 0 FOR [Reserve];


GO
PRINT N'Creating unnamed constraint on [dbo].[Inventory]...';


GO
ALTER TABLE [dbo].[Inventory] WITH NOCHECK
    ADD FOREIGN KEY ([Storage_id]) REFERENCES [dbo].[Storages] ([id]) ON DELETE CASCADE;


GO
PRINT N'Creating unnamed constraint on [dbo].[Inventory]...';


GO
ALTER TABLE [dbo].[Inventory] WITH NOCHECK
    ADD FOREIGN KEY ([Product_id]) REFERENCES [dbo].[Products] ([id]) ON DELETE CASCADE;


GO
PRINT N'Creating unnamed constraint on [dbo].[Products]...';


GO
ALTER TABLE [dbo].[Products] WITH NOCHECK
    ADD FOREIGN KEY ([Provider_id]) REFERENCES [dbo].[Providers] ([id]);


GO
PRINT N'Creating [dbo].[Names]...';


GO
CREATE VIEW [dbo].[Names]
	AS 
		SELECT  [Prod].[Name] AS [Product],
				[Prov].[Name] AS [Provider],
				[Stor].[Name] AS [Storage]
		FROM [dbo].[Products] AS [Prod]
		JOIN [dbo].[Providers] AS [Prov] ON [Prod].[Provider_id] = [Prov].[id]
		JOIN [dbo].[Inventory] AS [Inv] ON [Inv].[Product_id] = [Prod].[id]
		JOIN [dbo].[Storages] AS [Stor] ON [Inv].[Storage_id] = [Stor].[id]
GO
PRINT N'Creating [dbo].[ProductCount]...';


GO
CREATE FUNCTION [dbo].[ProductCount]()
RETURNS @Result TABLE ([Count] INT, [Provider_id] INT)
AS
BEGIN

INSERT INTO @Result
SELECT SUM([Inv].[Count]), [Prod].[Provider_id]
FROM [dbo].[Products] AS [Prod]
		JOIN [dbo].[Inventory] AS [Inv] ON [Inv].[Product_id] = [Prod].[id]
GROUP BY  [Prod].[Provider_id]

RETURN
END;
GO
PRINT N'Creating [dbo].[AddInventory]...';


GO
CREATE PROCEDURE [dbo].[AddInventory]
	@storage_id int,
	@product_id int,
	@count int,
	@reserve int = 0
AS
BEGIN

IF ((SELECT COUNT(1) FROM [dbo].[Inventory] 
	WHERE [dbo].[Inventory].[Storage_id] = @storage_id 
		AND [dbo].[Inventory].[Product_id] = @product_id) = 0)

		INSERT INTO [dbo].[Inventory] 
		VALUES (@storage_id, @product_id, @count, @reserve)

	ELSE

		UPDATE [dbo].[Inventory] 
		SET [dbo].[Inventory].[Count] = [dbo].[Inventory].[Count] + @count,
			[dbo].[Inventory].[Reserve] = [dbo].[Inventory].[Reserve] + @reserve
		WHERE ([dbo].[Inventory].Storage_id = @storage_id 
			AND [dbo].[Inventory].[Product_id] = @product_id)

END;
RETURN 0
GO
PRINT N'Creating [dbo].[AddProvider]...';


GO

CREATE PROCEDURE [dbo].[AddProvider]
	@Name VARCHAR (100),
	@Telephone VARCHAR (15),
	@Email VARCHAR (30),
	@Adress VARCHAR (100),
	@Director VARCHAR (30),
	@Products Prods READONLY
AS
BEGIN
	INSERT INTO [dbo].[Providers] 
		VALUES (@Name, @Telephone, @Email, @Adress, @Director)

	DECLARE @provider_id INT;

	SELECT TOP 1 @provider_id = [dbo].[Providers].[id] 
	FROM [dbo].[Providers]
	ORDER BY [dbo].[Providers].[id] DESC

	INSERT INTO [dbo].[Products] ([Name],[Short_name],[Vendor_code],[Barcode],[Price],[Provider_id])
		SELECT *, @provider_id FROM @Products
END;
RETURN 0
GO
PRINT N'Creating [dbo].[DeleteProduct]...';


GO
CREATE PROCEDURE [dbo].[DeleteProduct]
	@product_id int
AS
BEGIN
	DELETE [dbo].[Products]
	WHERE @product_id = [dbo].[Products].[id]
	--Inventory has cascade deeting
END;
RETURN 0
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DECLARE @Product1 Prods
DECLARE @Product2 Prods
BEGIN
IF ((SELECT COUNT(1) FROM [dbo].[Storages]) = 0)
BEGIN
INSERT INTO [dbo].[Storages]
	VALUES ('Sklad 1', 'Днепр', 'Nick', '0990101');

INSERT INTO [dbo].[Storages]
	VALUES ('Sklad 2', 'Киев', 'Vlad', '0990102');
END;
	
IF ((SELECT COUNT(1) FROM [dbo].[Providers]) = 0)
BEGIN
INSERT INTO @Product1
	VALUES ('Chocolate', 'Choco', 1234, '2990832', 11.99)

EXEC [dbo].[AddProvider] @Name = 'AVK', @Telephone = '0502345', @Email = 'WEDF@DF.UA',
	@Adress = 'Днепр', @Director = 'Тасельхоф', @Products = @Product1

INSERT INTO @Product2
	VALUES ('Apple', 'Choco', 3429, '2990234', 16.32)

EXEC [dbo].[AddProvider] @Name = 'Ферма', @Telephone = '0502345', @Email = 'dfed@yhb.UA',
	@Adress = 'Днепр', @Director = 'Бонифатциевна', @Products = @Product2

EXEC [dbo].[AddInventory] 1, 1, 2
END;

END;
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.Inventory'), OBJECT_ID(N'dbo.Products'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
